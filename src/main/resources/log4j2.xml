<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>
        <RollingFile name="File" fileName="logs/chat-service.log" filePattern="logs/chat-service-%d{yyyy-MM-dd}-%i.log.gz">
            <PatternLayout>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10"/>
        </RollingFile>
        <!-- 
        Mermaid Diagram for Logging Flow:
        graph TD
            A[Application Code] -- Log Event --> B((Log4j2 Core));
            B -- Routing --> C{Appenders};
            C --> D[Console Appender];
            C --> E[Rolling File Appender];
            C --> F[Kafka Appender (Abstracted)];
            F -- Forwards to --> G(Event Hub / Kafka);
        
        This shows how a dedicated Kafka appender could be added to support
        an abstracted event logging layer for production monitoring.
        -->
    </Appenders>
    <Loggers>
        <Root level="info">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Root>
        <Logger name="com.example" level="debug" additivity="false">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File"/>
        </Logger>
    </Loggers>
</Configuration>